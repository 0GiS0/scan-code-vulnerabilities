parameters:
  - name: SNYK_TOKEN # name of the parameter; required
    type: string # data type of the parameter; required
  - name: SL_TOKEN # name of the parameter; required
    type: string # data type of the parameter; required
  - name: working_directory
    type: string    
  - name: repo
    type: string    
  - name: path
    type: string
  - name: app_name
    type: string    
  - name: csproj
    type: string    

jobs:
  # - job: SonarQube

  - job: Snyk
    steps:
      - task: CmdLine@2
        displayName: "Checkout a public GH repo"
        inputs:
          script: |
            git clone ${{ parameters.repo }}
      - task: CmdLine@2
        displayName: "Install Snyc CLI"
        inputs:
          script: |
            curl --compressed https://static.snyk.io/cli/latest/snyk-linux -o snyk
            chmod +x ./snyk
            mv ./snyk /usr/local/bin/
      - task: CmdLine@2
        displayName: "Scan .NET code"
        inputs:
          script: |
            cd ${{ parameters.working_directory }}
            dotnet build
            snyk code test --sarif || true
            snyk code test --sarif > $(Build.ArtifactStagingDirectory)/snyk-code.sarif || true
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: "$(Build.ArtifactStagingDirectory)/snyk-code.sarif"
          ArtifactName: "CodeAnalysisLogs"
          publishLocation: "Container"
  
  - job: SASTScan
    variables:
      SHIFTLEFT_ACCESS_TOKEN: ${{ parameters.SL_TOKEN }}
    steps:
      - task: CmdLine@2
        displayName: "Checkout a public GH repo"
        inputs:
          script: |
            git clone ${{ parameters.repo }}
      - task: CmdLine@2
        displayName: "Install sast-scan CLI"
        inputs:
          script: |
            curl https://cdn.shiftleft.io/download/sl >/usr/local/bin/sl && chmod a+rx /usr/local/bin/sl
      - task: CmdLine@2
        displayName: "Scan .NET code"
        inputs:
          script: |
            cd ${{ parameters.working_directory }}
            dotnet build
            sl analyze --app ${{ parameters.app_name }} --csharp --wait ${{ parameters.csproj }}
